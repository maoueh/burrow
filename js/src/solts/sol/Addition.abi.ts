//Code generated by solts. DO NOT EDIT.
import { Readable } from "stream";
import { Address, BlockRange, CallTx, ContractCodec, EndOfStream, EventStream, LogEvent, Result } from "../../index";
interface Provider {
    deploy(msg: CallTx): Promise<Address>;
    call(msg: CallTx): Promise<Uint8Array | undefined>;
    callSim(msg: CallTx): Promise<Uint8Array | undefined>;
    listen(signature: string, address: string, callback: (err?: Error | EndOfStream, log?: LogEvent) => void, range?: BlockRange): EventStream;
    payload(data: string | Uint8Array, address?: string): CallTx;
    contractCodec(contractABI: string): ContractCodec;
}
async function call<Output>(client: Provider, addr: string, data: Uint8Array, isSim: boolean, callback: (exec: Uint8Array | undefined) => Output): Promise<Output> {
    const payload = client.payload(data, addr);
    const txe = await (isSim ? client.callSim(payload) : client.call(payload));
    return callback(txe);
}
function linker(bytecode: string, name: string, address: string): string {
    address = address + Array(40 - address.length + 1).join("0");
    const truncated = name.slice(0, 36);
    const label = "__" + truncated + Array(37 - truncated.length).join("_") + "__";
    while (bytecode.indexOf(label) >= 0)
        bytecode = bytecode.replace(label, address);
    return bytecode;
}
export module Addition {
    export const abi = '[{"constant":true,"inputs":[{"internalType":"int256","name":"a","type":"int256"},{"internalType":"int256","name":"b","type":"int256"}],"name":"add","outputs":[{"internalType":"int256","name":"sum","type":"int256"}],"payable":false,"stateMutability":"pure","type":"function"}]';
    export const bytecode = '608060405234801561001057600080fd5b5060b88061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063a5f3c23b14602d575b600080fd5b606060048036036040811015604157600080fd5b8101908080359060200190929190803590602001909291905050506076565b6040518082815260200191505060405180910390f35b600081830190509291505056fea265627a7a72315820bf9f1b3176bb0e5383e0dbeabc3258cbe895f39124127f38452c4ce85df9672964736f6c63430005110032';
    export function deploy(client: Provider): Promise<string> {
        const codec = client.contractCodec(abi);
        let linkedBytecode = bytecode;
        const data = Buffer.concat([Buffer.from(linkedBytecode, "hex"), codec.encodeDeploy()]);
        const payload = client.payload(data);
        return client.deploy(payload);
    }
    export const contract = (client: Provider, address: string) => ({ functions: { add(a: number, b: number): Promise<{
                sum: number;
            }> {
                const data = encode(client).add(a, b);
                return call<{
                    sum: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).add();
                });
            } } as const, listeners: {} as const } as const);
    type EventRegistry = typeof events;
    export type Event = keyof EventRegistry;
    export type TaggedPayload<T extends Event> = ReturnType<EventRegistry[T]["tagged"]>;
    const events = {} as const;
    export const encode = (client: Provider) => { const codec = client.contractCodec(abi); return {
        add: (a: number, b: number) => { return codec.encodeFunctionData("A5F3C23B", a, b); }
    }; };
    export const decode = (client: Provider, data: Uint8Array | undefined, topics: Uint8Array[] = []) => { const codec = client.contractCodec(abi); return {
        add: (): {
            sum: number;
        } => {
            const [sum] = codec.decodeFunctionResult ("A5F3C23B", data);
            return { sum: sum };
        }
    }; };
}